# Generated from /Users/MiniJava/MiniJava.g4 by ANTLR 4.5.1
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\60")
        buf.write("\u0146\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t")
        buf.write("\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23")
        buf.write("\3\23\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37")
        buf.write("\3 \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3&")
        buf.write("\3\'\3\'\3\'\3(\3(\3(\3(\3(\3)\3)\3)\3)\3*\3*\7*\u010b")
        buf.write("\n*\f*\16*\u010e\13*\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0119")
        buf.write("\n+\3,\3,\7,\u011d\n,\f,\16,\u0120\13,\3,\5,\u0123\n,")
        buf.write("\3-\6-\u0126\n-\r-\16-\u0127\3-\3-\3.\3.\3.\3.\7.\u0130")
        buf.write("\n.\f.\16.\u0133\13.\3.\3.\3.\3.\3/\3/\3/\3/\7/\u013d")
        buf.write("\n/\f/\16/\u0140\13/\3/\3/\3/\3/\3/\4\u0131\u013e\2\60")
        buf.write("\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O")
        buf.write(")Q*S+U,W-Y.[/]\60\3\2\7\5\2C\\aac|\6\2\62;C\\aac|\3\2")
        buf.write("\63;\3\2\62;\5\2\13\f\17\17\"\"\u014c\2\3\3\2\2\2\2\5")
        buf.write("\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2")
        buf.write("\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2")
        buf.write("\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2")
        buf.write("\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2")
        buf.write("\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2")
        buf.write("W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\3_\3\2\2\2")
        buf.write("\5e\3\2\2\2\7g\3\2\2\2\tn\3\2\2\2\13u\3\2\2\2\rz\3\2\2")
        buf.write("\2\17\177\3\2\2\2\21\u0081\3\2\2\2\23\u008a\3\2\2\2\25")
        buf.write("\u008c\3\2\2\2\27\u008e\3\2\2\2\31\u0096\3\2\2\2\33\u0098")
        buf.write("\3\2\2\2\35\u009a\3\2\2\2\37\u00a1\3\2\2\2!\u00a3\3\2")
        buf.write("\2\2#\u00a9\3\2\2\2%\u00b1\3\2\2\2\'\u00b5\3\2\2\2)\u00b8")
        buf.write("\3\2\2\2+\u00bd\3\2\2\2-\u00c3\3\2\2\2/\u00d6\3\2\2\2")
        buf.write("\61\u00d8\3\2\2\2\63\u00da\3\2\2\2\65\u00dc\3\2\2\2\67")
        buf.write("\u00e3\3\2\2\29\u00e5\3\2\2\2;\u00e7\3\2\2\2=\u00e9\3")
        buf.write("\2\2\2?\u00eb\3\2\2\2A\u00ed\3\2\2\2C\u00ef\3\2\2\2E\u00f1")
        buf.write("\3\2\2\2G\u00f3\3\2\2\2I\u00f6\3\2\2\2K\u00f9\3\2\2\2")
        buf.write("M\u00fc\3\2\2\2O\u00ff\3\2\2\2Q\u0104\3\2\2\2S\u0108\3")
        buf.write("\2\2\2U\u0118\3\2\2\2W\u0122\3\2\2\2Y\u0125\3\2\2\2[\u012b")
        buf.write("\3\2\2\2]\u0138\3\2\2\2_`\7e\2\2`a\7n\2\2ab\7c\2\2bc\7")
        buf.write("u\2\2cd\7u\2\2d\4\3\2\2\2ef\7}\2\2f\6\3\2\2\2gh\7r\2\2")
        buf.write("hi\7w\2\2ij\7d\2\2jk\7n\2\2kl\7k\2\2lm\7e\2\2m\b\3\2\2")
        buf.write("\2no\7u\2\2op\7v\2\2pq\7c\2\2qr\7v\2\2rs\7k\2\2st\7e\2")
        buf.write("\2t\n\3\2\2\2uv\7x\2\2vw\7q\2\2wx\7k\2\2xy\7f\2\2y\f\3")
        buf.write("\2\2\2z{\7o\2\2{|\7c\2\2|}\7k\2\2}~\7p\2\2~\16\3\2\2\2")
        buf.write("\177\u0080\7*\2\2\u0080\20\3\2\2\2\u0081\u0082\7U\2\2")
        buf.write("\u0082\u0083\7v\2\2\u0083\u0084\7t\2\2\u0084\u0085\7k")
        buf.write("\2\2\u0085\u0086\7p\2\2\u0086\u0087\7i\2\2\u0087\u0088")
        buf.write("\7]\2\2\u0088\u0089\7_\2\2\u0089\22\3\2\2\2\u008a\u008b")
        buf.write("\7+\2\2\u008b\24\3\2\2\2\u008c\u008d\7\177\2\2\u008d\26")
        buf.write("\3\2\2\2\u008e\u008f\7g\2\2\u008f\u0090\7z\2\2\u0090\u0091")
        buf.write("\7v\2\2\u0091\u0092\7g\2\2\u0092\u0093\7p\2\2\u0093\u0094")
        buf.write("\7f\2\2\u0094\u0095\7u\2\2\u0095\30\3\2\2\2\u0096\u0097")
        buf.write("\7?\2\2\u0097\32\3\2\2\2\u0098\u0099\7=\2\2\u0099\34\3")
        buf.write("\2\2\2\u009a\u009b\7t\2\2\u009b\u009c\7g\2\2\u009c\u009d")
        buf.write("\7v\2\2\u009d\u009e\7w\2\2\u009e\u009f\7t\2\2\u009f\u00a0")
        buf.write("\7p\2\2\u00a0\36\3\2\2\2\u00a1\u00a2\7.\2\2\u00a2 \3\2")
        buf.write("\2\2\u00a3\u00a4\7k\2\2\u00a4\u00a5\7p\2\2\u00a5\u00a6")
        buf.write("\7v\2\2\u00a6\u00a7\7]\2\2\u00a7\u00a8\7_\2\2\u00a8\"")
        buf.write("\3\2\2\2\u00a9\u00aa\7d\2\2\u00aa\u00ab\7q\2\2\u00ab\u00ac")
        buf.write("\7q\2\2\u00ac\u00ad\7n\2\2\u00ad\u00ae\7g\2\2\u00ae\u00af")
        buf.write("\7c\2\2\u00af\u00b0\7p\2\2\u00b0$\3\2\2\2\u00b1\u00b2")
        buf.write("\7k\2\2\u00b2\u00b3\7p\2\2\u00b3\u00b4\7v\2\2\u00b4&\3")
        buf.write("\2\2\2\u00b5\u00b6\7k\2\2\u00b6\u00b7\7h\2\2\u00b7(\3")
        buf.write("\2\2\2\u00b8\u00b9\7g\2\2\u00b9\u00ba\7n\2\2\u00ba\u00bb")
        buf.write("\7u\2\2\u00bb\u00bc\7g\2\2\u00bc*\3\2\2\2\u00bd\u00be")
        buf.write("\7y\2\2\u00be\u00bf\7j\2\2\u00bf\u00c0\7k\2\2\u00c0\u00c1")
        buf.write("\7n\2\2\u00c1\u00c2\7g\2\2\u00c2,\3\2\2\2\u00c3\u00c4")
        buf.write("\7U\2\2\u00c4\u00c5\7{\2\2\u00c5\u00c6\7u\2\2\u00c6\u00c7")
        buf.write("\7v\2\2\u00c7\u00c8\7g\2\2\u00c8\u00c9\7o\2\2\u00c9\u00ca")
        buf.write("\7\60\2\2\u00ca\u00cb\7q\2\2\u00cb\u00cc\7w\2\2\u00cc")
        buf.write("\u00cd\7v\2\2\u00cd\u00ce\7\60\2\2\u00ce\u00cf\7r\2\2")
        buf.write("\u00cf\u00d0\7t\2\2\u00d0\u00d1\7k\2\2\u00d1\u00d2\7p")
        buf.write("\2\2\u00d2\u00d3\7v\2\2\u00d3\u00d4\7n\2\2\u00d4\u00d5")
        buf.write("\7p\2\2\u00d5.\3\2\2\2\u00d6\u00d7\7]\2\2\u00d7\60\3\2")
        buf.write("\2\2\u00d8\u00d9\7_\2\2\u00d9\62\3\2\2\2\u00da\u00db\7")
        buf.write("\60\2\2\u00db\64\3\2\2\2\u00dc\u00dd\7n\2\2\u00dd\u00de")
        buf.write("\7g\2\2\u00de\u00df\7p\2\2\u00df\u00e0\7i\2\2\u00e0\u00e1")
        buf.write("\7v\2\2\u00e1\u00e2\7j\2\2\u00e2\66\3\2\2\2\u00e3\u00e4")
        buf.write("\7#\2\2\u00e48\3\2\2\2\u00e5\u00e6\7-\2\2\u00e6:\3\2\2")
        buf.write("\2\u00e7\u00e8\7/\2\2\u00e8<\3\2\2\2\u00e9\u00ea\7,\2")
        buf.write("\2\u00ea>\3\2\2\2\u00eb\u00ec\7\61\2\2\u00ec@\3\2\2\2")
        buf.write("\u00ed\u00ee\7\'\2\2\u00eeB\3\2\2\2\u00ef\u00f0\7>\2\2")
        buf.write("\u00f0D\3\2\2\2\u00f1\u00f2\7@\2\2\u00f2F\3\2\2\2\u00f3")
        buf.write("\u00f4\7?\2\2\u00f4\u00f5\7?\2\2\u00f5H\3\2\2\2\u00f6")
        buf.write("\u00f7\7#\2\2\u00f7\u00f8\7?\2\2\u00f8J\3\2\2\2\u00f9")
        buf.write("\u00fa\7(\2\2\u00fa\u00fb\7(\2\2\u00fbL\3\2\2\2\u00fc")
        buf.write("\u00fd\7~\2\2\u00fd\u00fe\7~\2\2\u00feN\3\2\2\2\u00ff")
        buf.write("\u0100\7v\2\2\u0100\u0101\7j\2\2\u0101\u0102\7k\2\2\u0102")
        buf.write("\u0103\7u\2\2\u0103P\3\2\2\2\u0104\u0105\7p\2\2\u0105")
        buf.write("\u0106\7g\2\2\u0106\u0107\7y\2\2\u0107R\3\2\2\2\u0108")
        buf.write("\u010c\t\2\2\2\u0109\u010b\t\3\2\2\u010a\u0109\3\2\2\2")
        buf.write("\u010b\u010e\3\2\2\2\u010c\u010a\3\2\2\2\u010c\u010d\3")
        buf.write("\2\2\2\u010dT\3\2\2\2\u010e\u010c\3\2\2\2\u010f\u0110")
        buf.write("\7v\2\2\u0110\u0111\7t\2\2\u0111\u0112\7w\2\2\u0112\u0119")
        buf.write("\7g\2\2\u0113\u0114\7h\2\2\u0114\u0115\7c\2\2\u0115\u0116")
        buf.write("\7n\2\2\u0116\u0117\7u\2\2\u0117\u0119\7g\2\2\u0118\u010f")
        buf.write("\3\2\2\2\u0118\u0113\3\2\2\2\u0119V\3\2\2\2\u011a\u011e")
        buf.write("\t\4\2\2\u011b\u011d\t\5\2\2\u011c\u011b\3\2\2\2\u011d")
        buf.write("\u0120\3\2\2\2\u011e\u011c\3\2\2\2\u011e\u011f\3\2\2\2")
        buf.write("\u011f\u0123\3\2\2\2\u0120\u011e\3\2\2\2\u0121\u0123\7")
        buf.write("\62\2\2\u0122\u011a\3\2\2\2\u0122\u0121\3\2\2\2\u0123")
        buf.write("X\3\2\2\2\u0124\u0126\t\6\2\2\u0125\u0124\3\2\2\2\u0126")
        buf.write("\u0127\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2")
        buf.write("\u0128\u0129\3\2\2\2\u0129\u012a\b-\2\2\u012aZ\3\2\2\2")
        buf.write("\u012b\u012c\7\61\2\2\u012c\u012d\7\61\2\2\u012d\u0131")
        buf.write("\3\2\2\2\u012e\u0130\13\2\2\2\u012f\u012e\3\2\2\2\u0130")
        buf.write("\u0133\3\2\2\2\u0131\u0132\3\2\2\2\u0131\u012f\3\2\2\2")
        buf.write("\u0132\u0134\3\2\2\2\u0133\u0131\3\2\2\2\u0134\u0135\7")
        buf.write("\f\2\2\u0135\u0136\3\2\2\2\u0136\u0137\b.\2\2\u0137\\")
        buf.write("\3\2\2\2\u0138\u0139\7\61\2\2\u0139\u013a\7,\2\2\u013a")
        buf.write("\u013e\3\2\2\2\u013b\u013d\13\2\2\2\u013c\u013b\3\2\2")
        buf.write("\2\u013d\u0140\3\2\2\2\u013e\u013f\3\2\2\2\u013e\u013c")
        buf.write("\3\2\2\2\u013f\u0141\3\2\2\2\u0140\u013e\3\2\2\2\u0141")
        buf.write("\u0142\7,\2\2\u0142\u0143\7\61\2\2\u0143\u0144\3\2\2\2")
        buf.write("\u0144\u0145\b/\2\2\u0145^\3\2\2\2\n\2\u010c\u0118\u011e")
        buf.write("\u0122\u0127\u0131\u013e\3\b\2\2")
        return buf.getvalue()


class MiniJavaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    IDENTIFIER = 41
    BOOLEAN = 42
    INTEGER = 43
    WS = 44
    LINE_COMMENT = 45
    COMMENT = 46

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'{'", "'public'", "'static'", "'void'", "'main'", 
            "'('", "'String[]'", "')'", "'}'", "'extends'", "'='", "';'", 
            "'return'", "','", "'int[]'", "'boolean'", "'int'", "'if'", 
            "'else'", "'while'", "'System.out.println'", "'['", "']'", "'.'", 
            "'length'", "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", 
            "'>'", "'=='", "'!='", "'&&'", "'||'", "'this'", "'new'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "BOOLEAN", "INTEGER", "WS", "LINE_COMMENT", "COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "IDENTIFIER", "BOOLEAN", "INTEGER", 
                  "WS", "LINE_COMMENT", "COMMENT" ]

    grammarFileName = "MiniJava.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


